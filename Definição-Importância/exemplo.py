### Exemplo pr√°tico para ilustrar o impacto da escolha da estrutura de dados no desempenho. ###
import time

# Estrutura de Dados: Lista
def buscar_lista(lista, valor):
    for item in lista:
        if item == valor:
            return True
    return False

# Estrutura de Dados: Dicion√°rio (equivalente a uma √°rvore hash)
def buscar_dicionario(dicionario, valor):
    return valor in dicionario

# Criando uma lista de 1 milh√£o de elementos
lista = list(range(1000000))

# Criando um dicion√°rio com 1 milh√£o de elementos
dicionario = {i: None for i in range(1000000)}

# Fun√ß√£o para medir o tempo de execu√ß√£o
def medir_tempo(func, *args):
    inicio = time.perf_counter()  # Usando time.perf_counter() para medir o tempo com mais precis√£o
    func(*args)
    fim = time.perf_counter()
    return fim - inicio

# Medindo o tempo para buscar um elemento na lista
tempo_lista = medir_tempo(buscar_lista, lista, 999999)

# Medindo o tempo para buscar um elemento no dicion√°rio
tempo_dicionario = medir_tempo(buscar_dicionario, dicionario, 999999)

# Mostrando os resultados
print(f"Tempo para buscar na lista: {tempo_lista:.6f} segundos")
print(f"Tempo para buscar no dicion√°rio: {tempo_dicionario:.6f} segundos")


#Explica√ß√£o:

#No exemplo acima, comparamos o tempo de busca entre uma lista e um dicion√°rio (que √© uma estrutura de dados baseada em hash). A busca na lista √© feita de forma sequencial, o que leva mais tempo √† medida que a lista cresce. No dicion√°rio, a busca √© feita em tempo constante O(1), o que √© muito mais r√°pido. üöÄ

#Resultado esperado:

#O tempo de busca na lista ser√° significativamente maior do que no dicion√°rio, especialmente com listas grandes. ‚è≥